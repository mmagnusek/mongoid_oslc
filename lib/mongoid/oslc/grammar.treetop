# oslc_where    ::= "oslc.where=" compound_term
# compound_term ::= simple_term (space? boolean_op space? simple_term)*
# simple_term   ::= term | scoped_term
# space         ::= " " /* a space character */
# boolean_op    ::= "and"
# term          ::= identifier_wc comparison_op value | identifier_wc space in_op space? in_val
# scoped_term   ::= identifier_wc "{" compound_term "}"
# identifier_wc ::= identifier | wildcard
# identifier    ::= PrefixedName
# PrefixedName  ::= /* see "SPARQL Query Language for RDF", http://www.w3.org/TR/rdf-sparql-query/#rPrefixedName */
# wildcard      ::= "*"
# comparison_op ::= "=" | "!=" | "<" | ">" | "<=" | ">="
# in_op         ::= "in"
# in_val        ::= "[" value ("," value)* "]"
# value         ::= uri_ref_esc | literal_value
# uri_ref_esc   ::= /* an angle bracket-delimited URI reference in which > and \ are \-escaped. */
# literal_value ::= boolean | decimal | string_esc (LANGTAG | ("^^" PrefixedName))?
# boolean       ::= "true" | "false"
# decimal       ::= /* see "XML Schema Part 2: Datatypes Second Edition", http://www.w3.org/TR/xmlschema-2/ */
# string_esc    ::= /* a string enclosed in double quotes, with certain characters escaped. See below. */
# LANGTAG       ::= /* see "SPARQL Query Language for RDF", http://www.w3.org/TR/rdf-sparql-query/#rLANGTAG */

grammar Grammar

  rule decision
    binary_decision / simple_term
  end

  rule binary_decision
    operand_1:simple_term space? boolean_op space? operand_2:decision <Mongoid::Oslc::Grammar::BinaryDecision>
  end

  rule simple_term
    term
  end

  rule term
    field comparison_op value <Mongoid::Oslc::Grammar::Condition>
  end

  rule boolean_op
    'and' <Mongoid::Oslc::Grammar::LogicalOperator>
  end

  rule space
    ' '
  end

  rule field
    [\w\:]+ <Mongoid::Oslc::Grammar::Field>
  end

  rule comparison_op
    [\=\>\<\!] <Mongoid::Oslc::Grammar::Operator>
  end

  rule value
    literal_value / uri_ref_esc
  end

  rule uri_ref_esc
    [\w]+ <Mongoid::Oslc::Grammar::UriRefEsc>
  end

  rule literal_value
    boolean / decimal / string_esc
  end

  rule boolean
    'true' <Mongoid::Oslc::Grammar::BooleanValue> / 'false' <Mongoid::Oslc::Grammar::BooleanValue>
  end

  rule decimal
    [\d]+
  end

  rule string_esc
    '"' [^\"]* '"' <Mongoid::Oslc::Grammar::StringEsc>
  end
end
